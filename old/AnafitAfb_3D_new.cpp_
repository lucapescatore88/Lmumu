#include "ReadTree_comp.hpp"
#include "multi_analyser.hpp"
#include "Lb_cuts.hpp"
#include "RooAbsReal.h"
#include "RooSimultaneous.h"
#include "RooGenericPdf.h"
#include "TGraphErrors.h"
#include "TGraphAsymmErrors.h"
#include "TROOT.h"
#include "FeldmanCousins.hpp"
#include "RooKeysPdf.h"
#include "functions.hpp"
#include "fitfunc.hpp"


using namespace RooFit;
using namespace std;

RooFitResult * findMinRandom( RooAbsPdf * pdf, RooDataSet * data, Str2VarMap p, ISVALIDF_PTR isValid, string opt, int nfree, RooArgSet * cons, RooAbsReal * nll = NULL)
{
	RooRealVar cosThetaL("cosThetaL","cosThetaL",0.,-1.,1.);
	RooRealVar cosThetaB("cosThetaB","cosThetaB",0.,-1.,1.);
	RooRealVar MM("Lb_MassConsLambda","Lb_MassConsLambda",5621.,5540.,5900.);
	RooArgSet obs(cosThetaL,cosThetaB,MM);

	vector < string > pnames(1,"afb");
	pnames.push_back("afbB");
	pnames.push_back("fL");
	p = GetParams(pdf,obs,pnames);

	double precision = 0.001;
	if(!nll) nll = pdf->createNLL(*data);
	RooFitResult * res = NULL;

	const unsigned np = 200;
	double a[np], f[np], ab[np];
	double c[3], r[1] = { 1e6 };

	genPoints(np,a,f,ab);
	while (r[0] > precision)
	{
		scan(pdf,data,nll,p,nfree,opt,cons,np,a,f,ab,c,r);
		genPointsSphere(np,c,r,a,f,ab);
	}
	scan(pdf,data,nll,p,nfree,opt,cons,np,a,f,ab,c,r);

	return res;
}



int main(int argc, char **argv)
{
	gErrorIgnoreLevel = kError;
	bool printeff = false;
	string fc = "none";
	string bkgmodel = "Poly0-l2-v0";
	int dobin = -1;
	vector < vector < double > > points;

	gROOT->ProcessLine(".x ~/work/lhcbStyle.C");

	if(argc > 3 && ((string)argv[1]).find("[")!=string::npos && ((string)argv[2]).find("[")!=string::npos)
	{
		cout << "IN" << endl;
		points.push_back( getList( argv[1] ) );
		points.push_back( getList( argv[2] ) );
	
		for (size_t i = 0; i < points[0].size(); i++)
		{
			cout << points[0][i] << "    "  << points[1][i] << endl;
		}

		printeff = false;
	}
	else cout << "No points set" << endl;
	
	if(argc > 1)
	{
		for(int a = 3; a < argc; a++)
		{
			string arg = argv[a];
			string str = arg.substr(2,arg.length()-2);

			if(arg.find("-E")!=string::npos) fc = str;
			if(arg=="-peff") printeff = true;
			if(arg.find("-B")!=string::npos) dobin = ((TString)str).Atof();
		}
	}

	
	int start = 0;
	int nbins = 6;//CutsDef::nq2bins;
	if(dobin != -1) { start = dobin; nbins = dobin+1; }
	double q2min[] = {8,15.,11.0,15,16,18};//&CutsDef::q2min_highfirst[0];
	double q2max[] = {11,20.,12.5,16,18,20};//&CutsDef::q2max_highfirst[0];

	TString datafilename = "/afs/cern.ch/work/p/pluca/Lmumu/weighted/candLb.root";
	TreeReader * data = new TreeReader("candLb2Lmumu");
	data->AddFile(datafilename);
	TreeReader * datajpsi = new TreeReader("candLb2JpsiL");
	datajpsi->AddFile(datafilename);

	TFile * histFile = new TFile("Afb_hist.root","recreate");

	string options = "-quiet-noPlot-lin-stdAxis-XM(#Lambda#mu#mu) (MeV/c^{2})-noCost-noParams";
	Analysis::SetPrintLevel("s");

	RooRealVar * cosThetaL = new RooRealVar("cosThetaL","cosThetaL",0.,-1.,1.);
	RooRealVar * cosThetaB = new RooRealVar("cosThetaB","cosThetaB",0.,-1.,1.);
	RooRealVar * MM = new RooRealVar("Lb_MassConsLambda","Lb_MassConsLambda",5621.,5540.,5900.);
	//RooRealVar * MMjpsi = new RooRealVar("Lb_MassConsJpsiLambda","Lb_MassConsJpsiLambda",5621.,5550.,5800.);
	RooMsgService::instance().setGlobalKillBelow(RooFit::FATAL);

	TGraphAsymmErrors * Afb_vs_q2 = new TGraphAsymmErrors();
	TGraphAsymmErrors * AfbB_vs_q2 = new TGraphAsymmErrors();
	TGraphAsymmErrors * fL_vs_q2 = new TGraphAsymmErrors();
	TCanvas * ceff = new TCanvas();

	RooCategory * samples = new RooCategory("samples","samples");
	samples->defineType("DD");
	samples->defineType("LL");

	RooRealVar * afb = new RooRealVar("afb","afb",0.,-0.75,0.75);
	RooRealVar * fL = new RooRealVar("fL","fL",0.8,0.,1.);
	RooRealVar * afbB = new RooRealVar("afbB","afbB",0.,-0.5,0.5);
	TString afbLpdf = "((3./8.)*(1.-fL)*(1 + TMath::Power(cosThetaL,2)) + afb*cosThetaL + (3./4.)*fL*(1 - TMath::Power(cosThetaL,2)))";
	TString afbBpdf = "(1 + 2*afbB*cosThetaB)";
	RooAbsPdf * teoPdf = new RooGenericPdf("teoPdf",afbLpdf,RooArgSet(*cosThetaL,*afb,*fL));
	RooAbsPdf * teoPdfB = new RooGenericPdf("teoPdfB",afbBpdf,RooArgSet(*cosThetaB,*afbB));
	RooAbsPdf * distr =  new RooProdPdf("distr","distr",RooArgSet(*teoPdf,*teoPdfB));

	/*
	   RooRealVar * k1 = new RooRealVar("k1","Op*alphaL",-0.461*0.642,-2.,2.);
	   RooRealVar * k2 = new RooRealVar("k2","Ou12*alphaL",-0.302*0.642,-2.,2.);
	   RooGenericPdf * distr =  new RooGenericPdf("distr",
	   "(3./8.) + (3./8.)*(cosThetaL^2)*(1-fL) - (3./16.)*fL*(cosThetaL^2) + afb*cosThetaL"  
	   "+ ((3./2.)*afbB - (3./8.)*k1)*cosThetaB - (3./2.)*afbB*(cosThetaL^2)*cosThetaB - (3./16.)*fL"
	   "+ (9./16.)*fL*(1 - cosThetaL^2) + (9./8.)*k1*(cosThetaL^2)*cosThetaB" 
	   "- (3./2.)*k2*cosThetaL*cosThetaB",
	   RooArgSet(*cosThetaL,*cosThetaB,*fL,*afb,*k1,*k2,*afbB) );
	   */

	//RooAbsPdf * bkgLL = NULL, * bkgLLB = NULL, * bkgDD = NULL, * bkgDDB = NULL;
	//buildBkgPdfs(8,11,"LL",CutsDef::LLcut,&bkgLL,&bkgLLB);
	//buildBkgPdfs(8,11,"DD",CutsDef::DDcut,&bkgDD,&bkgDDB);


	for(int i = start; i < nbins; i++)
	{
		TString q2name = ((TString)Form("q2_%4.2f_%4.2f",q2min[i],q2max[i])).ReplaceAll(".","");
		RooRealVar * var = MM;

		TreeReader * mydata = data;
		if(q2min[i]==8 && q2max[i]==11) 
		{ 
			mydata = datajpsi;
			//var = MMjpsi; 
			q2name = "jpsi"; 
		}

		TString curq2cut = Form("TMath::Power(J_psi_1S_MM/1000,2) >= %e && TMath::Power(J_psi_1S_MM/1000,2) < %e",q2min[i],q2max[i]);	

		cout << "------------------- q2 bin: " << q2min[i] << " - " << q2max[i] << " -----------------------" << endl;


		/**               GET MASS PARAMETERS                  **/


		Str2VarMap jpsiParsLL = getPars(q2min[i],q2max[i],var,"LL", CutsDef::LLcut, histFile);
		Str2VarMap jpsiParsDD = getPars(q2min[i],q2max[i],var,"DD", CutsDef::DDcut, histFile);


		/**               GET AND FIT EFFICIENCIES                  **/

		RooAbsPdf * effDDpdf = NULL, * effLLpdf = NULL, * effLLBpdf = NULL, * effDDBpdf = NULL;	
		getEfficiencies(q2min[i],q2max[i],&effLLpdf,&effDDpdf,&effLLBpdf,&effDDBpdf,printeff);
		cout << "Efficiencies extracted" << endl;
		histFile->cd();


		/**                    FIT AFB                  **/


		afb->setVal(0);
		afbB->setVal(-0.37);
		fL->setVal(0.7);
		//k1->setVal(-0.461*0.642);
		//k2->setVal(-0.302*0.642);

		RooAbsPdf * corrPdfLL = new RooProdPdf("sigPdfLL"+q2name,"corrPdfLL",RooArgSet(*distr,*effLLpdf,*effLLBpdf));
		RooAbsPdf * corrPdfDD = new RooProdPdf("sigPdfDD"+q2name,"corrPdfDD",RooArgSet(*distr,*effDDpdf,*effDDBpdf));

		TCut baseCut = "";
		TCut cutLL = CutsDef::LLcut + (TCut)curq2cut + baseCut;
		TCut cutDD = CutsDef::DDcut + (TCut)curq2cut + baseCut;

		histFile->cd();

		double fLL[2], fDD[2], slopeLL, slopeDD;
		RooDataSet * dataLL = getDataAndFrac("LL",q2name,mydata,NULL,cutLL,var,fLL,&slopeLL,jpsiParsLL,NULL,false);
		RooDataSet * dataDD = getDataAndFrac("DD",q2name,mydata,NULL,cutDD,var,fDD,&slopeDD,jpsiParsDD,NULL,false);

		RooRealVar * fracLL = new RooRealVar("fracLL","fracLL",fLL[0],0.1,1.);
		RooRealVar * fracDD = new RooRealVar("fracDD","fracDD",fDD[0],0.1,1.);
		RooAbsPdf * bkgMLL = stringToPdf(Form("Exp-b[%e]",slopeLL),"bkgMLL",var);
		RooAbsPdf * bkgMDD = stringToPdf(Form("Exp-b[%e]",slopeDD),"bkgMDD",var);
		RooAbsPdf * sigMLL = stringToPdf("DCB_Sn","sigMLL",var,jpsiParsLL);
		RooAbsPdf * sigMDD = stringToPdf("DCB_Sn","sigMDD",var,jpsiParsDD);

		RooAbsPdf * MmodelLL = new RooAddPdf("MassModelLL","MassModel",RooArgSet(*sigMLL,*bkgMLL),*fracLL);
		RooAbsPdf * MmodelDD = new RooAddPdf("MassModelDD","MassModel",RooArgSet(*sigMDD,*bkgMDD),*fracDD);

		RooGaussian * f_cost_LL = new RooGaussian("f_cost_LL","fLL",*fracLL,RooConst(fLL[0]),RooConst(fLL[1]));
		RooGaussian * f_cost_DD = new RooGaussian("f_cost_DD","fDD",*fracDD,RooConst(fDD[0]),RooConst(fDD[1]));
/*
		RooAbsPdf * bkgLL_teo = stringToPdf(bkgmodel.c_str(),"bkgLL_teo", cosThetaL);
		RooAbsPdf * bkgLLB_teo = stringToPdf(bkgmodel.c_str(),"bkgLLB_teo", cosThetaB);
		RooAbsPdf * bkgDD_teo = stringToPdf(bkgmodel.c_str(),"bkgDD_teo", cosThetaL); 
		RooAbsPdf * bkgDDB_teo = stringToPdf(bkgmodel.c_str(),"bkgDDB_teo", cosThetaB);
		RooAbsPdf * bkgLL = new RooProdPdf("bkgLL","",*bkgLL_teo,*effLLpdf);
		RooAbsPdf * bkgDD = new RooProdPdf("bkgDD","",*bkgDD_teo,*effDDpdf);
		RooAbsPdf * bkgLLB = new RooProdPdf("bkgLLB","",*bkgLLB_teo,*effLLBpdf);
		RooAbsPdf * bkgDDB = new RooProdPdf("bkgDDB","",*bkgDDB_teo,*effDDBpdf);
*/
		bkgmodel = "Cheb2-v0-l1";
		RooAbsPdf * bkgLL = stringToPdf(bkgmodel.c_str(),"bkgLL", cosThetaL);
		RooAbsPdf * bkgLLB = stringToPdf(bkgmodel.c_str(),"bkgLLB", cosThetaB);
		RooAbsPdf * bkgDD = stringToPdf(bkgmodel.c_str(),"bkgDD", cosThetaL); 
		RooAbsPdf * bkgDDB = stringToPdf(bkgmodel.c_str(),"bkgDDB", cosThetaB);
		
		RooAbsPdf * prodBkgLL = new RooProdPdf("bkgPdfLL"+q2name,"bkgLL",RooArgSet(*bkgLL,*bkgLLB));
		RooAbsPdf * prodBkgDD = new RooProdPdf("bkgPdfDD"+q2name,"bkgDD",RooArgSet(*bkgDD,*bkgDDB));

		RooAbsPdf * modelLL = new RooAddPdf("modelLL","modelLL",RooArgSet(*corrPdfLL,*prodBkgLL),*fracLL);
		RooAbsPdf * modelDD = new RooAddPdf("modelDD","modelDD",RooArgSet(*corrPdfDD,*prodBkgDD),*fracDD);

		RooArgSet * cons = new RooArgSet(*f_cost_LL,*f_cost_DD);

		RooAbsPdf * totPdfLL = new RooProdPdf("totPdfLL","totPdfLL",RooArgSet(*modelLL,*MmodelLL));
		RooAbsPdf * totPdfDD = new RooProdPdf("totPdfDD","totPdfDD",RooArgSet(*modelDD,*MmodelDD));

		// CREATE COMBINED DATASET
		RooDataSet * combData = new RooDataSet(Form("combData_%i",i),"combined data",RooArgSet(*var,*cosThetaL,*cosThetaB),
				Index(*samples),Import("DD",*dataDD),Import("LL",*dataLL));
		combData->Print();

		// FIT COS LEPTON
		RooSimultaneous * combModel = new RooSimultaneous(Form("combModel_%i",i),"",*samples);
		combModel->addPdf(*totPdfLL,"LL");
		combModel->addPdf(*totPdfDD,"DD");
		RooArgSet * origPars = copyFreePars(combModel,RooArgSet(*var,*cosThetaL));
		Str2VarMap params, paramsL, paramsB;
		params["fL"] = fL;
		params["afb"] = afb;	
		params["afbB"] = afbB;
		paramsL["fL"] = fL;
		paramsL["afb"] = afb;	
		paramsB["afbB"] = afbB;


		RooFitResult * res = findMinRandom(combModel,combData,params,NULL,"",7,cons);
		//RooFitResult * res = combModel->fitTo(*combData,PrintLevel(-1),Save(),Extended(true));
		//RooFitResult * res = safeFit(combModel,combData,params,&isInAllowedArea3D,"-scan",getNFreePars(combModel,RooArgSet(*cosThetaL,*cosThetaB,*var)),cons);

		int nbinsLL = 8;
		int nbinsDD = 10;
		if(q2name=="jpsi") { nbinsLL = 20; nbinsDD = 20; }
		ceff->cd();

		if(points.size()==0) 
		{
			GetFrame(cosThetaL,modelLL,dataLL,"-noCost-plotSigComp-fillBkg",nbinsLL,NULL,vector<string>(),"cos#theta_{l}")->Draw();
			ceff->Print("Afb_LL_"+q2name+".pdf");
			GetFrame(cosThetaL,modelDD,dataDD,"-noCost-plotSigComp-fillBkg",nbinsDD,NULL,vector<string>(),"cos#theta_{l}")->Draw();
			ceff->Print("Afb_DD_"+q2name+".pdf");

			GetFrame(var,MmodelLL,dataLL,"-noCost-fillBkg",30,NULL,vector<string>(),"m(#Lambda#mu#mu)")->Draw();
			ceff->Print("Mfit_Afb_LL_"+q2name+".pdf");
			GetFrame(var,MmodelDD,dataDD,"-noCost-fillBkg",30,NULL,vector<string>(),"m(#Lambda#mu#mu)")->Draw();
			ceff->Print("Mfit_Afb_DD_"+q2name+".pdf");
		}

		Afb_vs_q2->SetPoint(i,(q2max[i] + q2min[i])/2.,afb->getVal());
		fL_vs_q2->SetPoint(i,(q2max[i] + q2min[i])/2.,fL->getVal());

		if(points.size()==0) 
		{
			GetFrame(cosThetaB,modelLL,dataLL,"-noCost-plotSigComp-fillBkg",nbinsLL,NULL,vector<string>(),"cos#theta_{#Lambda}")->Draw();
			ceff->Print("AfbB_LL_"+q2name+".pdf");
			GetFrame(cosThetaB,modelDD,dataDD,"-noCost-plotSigComp-fillBkg",nbinsDD,NULL,vector<string>(),"cos#theta_{#Lambda}")->Draw();
			ceff->Print("AfbB_DD_"+q2name+".pdf");
		}

		AfbB_vs_q2->SetPoint(i,(q2max[i] + q2min[i])/2.,afbB->getVal());

		cout << endl << fixed << setprecision(6) << "AfbB = " << afbB->getVal() << " +/- " << afbB->getError() << endl;
		cout << "Afb = " << afb->getVal() << " +/- " << afb->getError() << endl;
		cout << "fL = " << fL->getVal() << " +/- " << fL->getError() << endl;
		cout << endl;
		if(res) cout << "lepton:  " << res->edm() << "   "  << res->covQual() << endl;
		cout << endl;



		if(fc!="none")
		{ 
			cout << "------------------------ FELDMAN AND COUSINS ------------------------" << endl;

			histFile->Close();
			histFile = new TFile("Afb_hist.root","recreate");

			vector<double> afb_err(0,2), fL_err(0,2), afbB_err(0,2);
			vector < RooDataSet * > datas;
			vector < RooAbsPdf * > pdfs, pdfsB;
			vector < TString > cat;
			cat.push_back("LL");
			cat.push_back("DD");
			datas.push_back(dataLL);
			datas.push_back(dataDD);

			pdfs.push_back(totPdfLL);
			pdfs.push_back(totPdfDD);

			if(fc == "all" || fc == "afb")
			{
				FeldmanCousins * FC = new FeldmanCousins(q2name,cat,datas,pdfs,cosThetaL,paramsL);
				FC->SetFitFunc(&findMinRandom);
				FC->AddConstraints(cons);
				FC->AddObservable(cosThetaB);
				FC->AddObservable(MM);
				FC->SetNExp(500);
				FC->Initialize();
				TGraph * best = new TGraph();
				vector< vector < double > > res = FC->ExtractLimits(points,origPars,&best);
				histFile->cd();
				best->Write("bestfit");
				
				double x,y;
				best->GetPoint(0,x,y);
				cout << "\n\n ***** Best fit: " << x << "    " << y << endl;
				for(unsigned kk = 0; kk < res.size(); kk++)
					cout << "\n\n ----- Pvalues: " << res[kk][0] << "    " << res[kk][1] << "    " << res[kk][2] << endl << endl;
			}

			//double lims[6][2] = { {-0.5,-0.2}, {-0.47,-0.2}, {-0.49,-0.2}, {-0.4,0.1}, {-0.5,-0.2}, {-0.43,0.} };
			if(fc == "all" || fc == "afbB")
			{
				FeldmanCousins * FCB = new FeldmanCousins(q2name,cat,datas,pdfs,cosThetaB,paramsB);
				FCB->SetFitFunc(&findMinRandom);
				FCB->AddConstraints(cons);
				FCB->AddObservable(cosThetaL);
				FCB->AddObservable(MM);
				FCB->SetNExp(500);
				FCB->SetNPointsToScan(15);
				TGraph * best = new TGraph();
				vector< vector < double > > res = FCB->ExtractLimits(points,origPars,&best);
				histFile->cd();
				best->Write("bestfit");
				
				double x,y;
				best->GetPoint(0,x,y);
				cout << "\n\n ***** Best fit: " << x << "    " << y << endl;
				for(unsigned kk = 0; kk < res.size(); kk++)
					cout << "\n\n ----- Pvalues: " << res[kk][0] << "    " << res[kk][1] << "    " << res[kk][2] << endl << endl;
			
				//afbB_err = FCB->ExtractLimits(params,origPars,lims[i][0],lims[i][1],&isInAllowedAreaB);
				//AfbB_vs_q2->SetPointError(i,(q2max[i] - q2min[i])/2.,(q2max[i] - q2min[i])/2.,TMath::Abs(afbB_err[0]-afbBval),TMath::Abs(afbB_err[1]-afbBval));
			}
		}
		else
		{
			AfbB_vs_q2->SetPointError(i,(q2max[i] - q2min[i])/2.,(q2max[i] - q2min[i])/2.,0,0);
			Afb_vs_q2->SetPointError(i,(q2max[i] - q2min[i])/2.,(q2max[i] - q2min[i])/2.,0,0);
			fL_vs_q2->SetPointError(i,(q2max[i] - q2min[i])/2.,(q2max[i] - q2min[i])/2.,0,0);
		}
	}

	histFile->Close();

	ceff->cd();
	Afb_vs_q2->GetXaxis()->SetTitle("q^{2}");
	Afb_vs_q2->GetYaxis()->SetTitle("A_{FB}^{l}");
	Afb_vs_q2->SetMaximum(1);
	Afb_vs_q2->SetMinimum(-1);
	Afb_vs_q2->Draw("AP");
	if(points.size()==0) ceff->Print("Afb_vs_q2.pdf");
	AfbB_vs_q2->GetXaxis()->SetTitle("q^{2}");
	AfbB_vs_q2->GetYaxis()->SetTitle("A_{FB}^{h}");
	AfbB_vs_q2->SetMaximum(1);
	AfbB_vs_q2->SetMinimum(-1);
	AfbB_vs_q2->Draw("AP");
	if(points.size()==0) ceff->Print("AfbB_vs_q2.pdf");
	fL_vs_q2->GetXaxis()->SetTitle("q^{2}");
	fL_vs_q2->GetYaxis()->SetTitle("f_{L}");
	fL_vs_q2->Draw("AP");
	if(points.size()==0) ceff->Print("fL_vs_q2.pdf");

	for(int bb = 0; bb < Afb_vs_q2->GetN(); bb++)
	{
		double qq, afbv, afbBv, fLv;
		Afb_vs_q2->GetPoint(bb,qq,afbv);
		AfbB_vs_q2->GetPoint(bb,qq,afbBv);
		fL_vs_q2->GetPoint(bb,qq,fLv);
		cout << fixed << setprecision(1) << q2min[bb] << " - " << q2max[bb];
		cout << fixed << setprecision(4); 

		if(fc == "all" || fc == "afb") cout << " & $" << afbv << "_{-" << Afb_vs_q2->GetErrorYlow(bb) << "}^{+" << Afb_vs_q2->GetErrorYhigh(bb)  << "} \\text{(stat)} \\pm \\text{(sys)}$ ";
		if(fc == "all" || fc == "afbB") cout << " & $" << afbBv << "_{-" << AfbB_vs_q2->GetErrorYlow(bb) << "}^{+" << AfbB_vs_q2->GetErrorYhigh(bb) << "} \\text{(stat)} \\pm \\text{(sys)}$ " ;
		if(fc == "all" || fc == "afb") cout << " & $" << fLv << "_{-" << fL_vs_q2->GetErrorYlow(bb) << "}^{+" << fL_vs_q2->GetErrorYhigh(bb)  << "} \\text{(stat)} \\pm \\text{(sys)}$ ";
		if(fc == "none") cout << " & \t" << afbv << " & \t" << afbBv << " & \t" << fLv;
		cout << "  \\\\ " << endl;
	}
}


/*
   RooArgSet parameters(*afb,*afbB,*fL);
   RooWorkspace* w = new RooWorkspace();

   RooStats::ModelConfig modelConfig;
   modelConfig.SetWorkspace(*w);
   modelConfig.SetPdf(*combModel);
   modelConfig.SetParametersOfInterest(parameters);
   RooStats::FeldmanCousins FC(*combData,modelConfig);
   FC.SetConfidenceLevel(0.95); // 95% interval
//fc.AdditionalNToysFactor(0.1); // to speed up the result 
FC.UseAdaptiveSampling(true); // speed it up a bit
FC.SetNBins(10); // set how many points per parameter of interest to scan
FC.CreateConfBelt(true);

PointSetInterval* interval = FC.GetInterval();
ConfidenceBelt* belt = FC.GetConfidenceBelt();

RooRealVar* firstPOI = (RooRealVar*) modelConfig.GetParametersOfInterest()->first();
cout << "\n95% interval on " <<firstPOI->GetName()<<" is : ["<<
interval->LowerLimit(*firstPOI) << ", "<<
interval->UpperLimit(*firstPOI) <<"] "<<endl;

RooDataSet* parameterScan = (RooDataSet*) FC.GetPointsToScan();
RooArgSet* tmpPoint;

TH1F* histOfThresholds = new TH1F("histOfThresholds","",
parameterScan->numEntries(),
firstPOI->getMin(),
firstPOI->getMax());

for(Int_t i=0; i<parameterScan->numEntries(); ++i){
tmpPoint = (RooArgSet*) parameterScan->get(i)->clone("temp");
double arMax = belt->GetAcceptanceRegionMax(*tmpPoint);
double arMin = belt->GetAcceptanceRegionMax(*tmpPoint);
double poiVal = tmpPoint->getRealValue(firstPOI->GetName()) ;
histOfThresholds->Fill(poiVal,arMax);
}
histOfThresholds->SetMinimum(0);
histOfThresholds->Draw();
*/		
