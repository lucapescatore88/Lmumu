#include "ReadTree_comp.hpp"
#include "multi_analyser.hpp"
#include "Lb_cuts.hpp"
#include "RooAbsReal.h"
#include "RooSimultaneous.h"
#include "RooGenericPdf.h"
#include "TGraphErrors.h"
#include "TGraphAsymmErrors.h"
#include "TROOT.h"
#include "FeldmanCousins.hpp"
#include "RooKeysPdf.h"
#include "functions.hpp"
#include "fitfunc.hpp"

using namespace RooFit;
using namespace std;




int main(int argc, char **argv)
{
	bool printeff = true;
	string fc = "none";
	string sys = "all";
	int dobin = -1;
	
	gROOT->ProcessLine(".x ~/work/lhcbStyle.C");

	if(argc > 1)
	{
		for(int a = 1; a < argc; a++)
		{
			string arg = argv[a];
			string str = arg.substr(2,arg.length()-2);

			if(arg.find("-E")!=string::npos) fc = str;
			if(arg=="-peff") printeff = true;
			if(arg.find("-S")!=string::npos) sys=str;
			if(arg.find("-B")!=string::npos) dobin=((TString)str).Atof();
		}
	}

	int nexp = 1000;
	int nbins = 7;
	int start = 1;
	if(dobin>-1) { start = dobin; nbins = dobin+1; }
	double q2min[] = {8.,15.,11.0,15,16,18,0.1};
	double q2max[] = {11.,20.,12.5,16,18,20,2.};

	TString datafilename = "/afs/cern.ch/work/p/pluca/weighted/Lmumu/candLb.root";
	TreeReader * data = new TreeReader("candLb2Lmumu");
	data->AddFile(datafilename);
	TreeReader * datajpsi = new TreeReader("candLb2JpsiL");
	datajpsi->AddFile(datafilename);

	TFile * histFile = new TFile("Afb_bkgSys.root","recreate");

	string options = "-quiet-noPlot-lin-XM(#Lambda#mu#mu) (MeV/c^{2})-noCost-noParams";
	Analysis::SetPrintLevel("s");

	RooRealVar * cosThetaL = new RooRealVar("cosThetaL","cosThetaL",0.,-1.,1.);
	RooRealVar * cosThetaB = new RooRealVar("cosThetaB","cosThetaB",0.,-1.,1.);
	RooRealVar * MM = new RooRealVar("Lb_MassConsLambda","Lb_MassConsLambda",5621.,5400.,6000.);
	MM->setRange("Signal",5600,5640);
	RooMsgService::instance().setGlobalKillBelow(RooFit::ERROR);

	RooCategory * samples = new RooCategory("samples","samples");
	samples->defineType("DD");
	samples->defineType("LL");

	RooRealVar * afb = new RooRealVar("afb","afb",0.,-0.75,0.75);
	RooRealVar * fL = new RooRealVar("fL","fL",0.6,0.,1.);
	TString afbLpdf = "((3./8.)*(1.-fL)*(1 + TMath::Power(cosThetaL,2)) + afb*cosThetaL + (3./4.)*fL*(1 - TMath::Power(cosThetaL,2)))";
	RooRealVar * afbB = new RooRealVar("afbB","afbB",0.,-0.5,0.5);
	TString afbBpdf = "(1 + 2*afbB*cosThetaB)";
	RooAbsPdf * teoPdf = new RooGenericPdf("teoPdf",afbLpdf,RooArgSet(*cosThetaL,*afb,*fL));
	RooAbsPdf * teoPdfB = new RooGenericPdf("teoPdfB",afbBpdf,RooArgSet(*cosThetaB,*afbB));

	Str2VarMap jpsiParsLL = getPars(8,11,MM, "LL", CutsDef::LLcut, histFile);
	Str2VarMap jpsiParsDD = getPars(8,11,MM, "DD", CutsDef::DDcut, histFile);

	vector<TH1 *> fLsysh, afbsysh, afbBsysh, fLsysh_frac, afbsysh_frac, afbBsysh_frac, fLsysh_eff, afbsysh_eff, afbBsysh_eff;

	RooAbsPdf * bkgLL = NULL, * bkgLLB = NULL, * bkgDD = NULL, * bkgDDB = NULL;
 	buildBkgPdfs(8,11,"LL",CutsDef::LLcut,&bkgLL,&bkgLLB,"RooKeysPdf");
	buildBkgPdfs(8,11,"DD",CutsDef::DDcut,&bkgDD,&bkgDDB,"RooKeysPdf");

	for(int i = start; i < nbins; i++)
	{
		TreeReader * mydata = data;
		TString q2name = ((TString)Form("q2_%4.2f_%4.2f",q2min[i],q2max[i])).ReplaceAll(".","");
		if(i>0) MM->setRange(5400,6000); 
		else { mydata = datajpsi; q2name = "jpsi"; MM->setRange(5500,5850); }
		TString curq2cut = Form("TMath::Power(J_psi_1S_MM/1000,2) >= %e && TMath::Power(J_psi_1S_MM/1000,2) < %e",q2min[i],q2max[i]);	

		cout << "------------------- q2 bin: " << q2min[i] << " - " << q2max[i] << " -----------------------" << endl;

		/**               GET AND FIT EFFICIENCIES                  **/

		RooAbsPdf * effDDpdf = NULL, * effLLpdf = NULL, * effLLBpdf = NULL, * effDDBpdf = NULL;	
		getEfficiencies(q2min[i],q2max[i],&effLLpdf,&effDDpdf,&effLLBpdf,&effDDBpdf,printeff);

		RooAbsPdf * effDDs = NULL, * effLLs = NULL, * effLLBs = NULL, * effDDBs = NULL;
		getEfficiencies(q2min[i],q2max[i],&effLLs,&effDDs,&effLLBs,&effDDBs,printeff,false);

		cout << "Efficiencies extracted" << endl;
		histFile->cd();


		/**                    FIT AFB                  **/


		afb->setVal(0);
		afbB->setVal(-0.37);
		fL->setVal(0.6);

		RooAbsPdf * corrPdfLL = new RooProdPdf("sigPdfLL"+q2name,"corrPdfLL",*teoPdf,*effLLpdf);
		RooAbsPdf * corrPdfDD = new RooProdPdf("sigPdfDD"+q2name,"corrPdfDD",*teoPdf,*effDDpdf);
		RooAbsPdf * corrPdfLLB = new RooProdPdf("sigPdfLLB"+q2name,"corrPdfLLB",*teoPdfB,*effLLBpdf);
		RooAbsPdf * corrPdfDDB = new RooProdPdf("sigPdfDDB"+q2name,"corrPdfDDB",*teoPdfB,*effDDBpdf);

		TCut baseCut = "";
		TCut cutLL = CutsDef::LLcut + (TCut)curq2cut + baseCut;
		TCut cutDD = CutsDef::DDcut + (TCut)curq2cut + baseCut;

		histFile->cd();
		double fracDDv[2], fracLLv[2];
		double nsigDD, nsigLL;
		double range[2] = { 5580, 5660 };
		RooDataSet * dataLL = getDataAndFrac("LL",q2name,mydata,range,cutLL,MM,&fracLLv[0],NULL,jpsiParsLL,&nsigLL);
		RooDataSet * dataDD = getDataAndFrac("DD",q2name,mydata,range,cutDD,MM,&fracDDv[0],NULL,jpsiParsDD,&nsigDD);
		double nevts = nsigDD+nsigLL;

		cout << fixed << setprecision(3) << fracDDv[0] << "   " << fracDDv[1] << endl;
		RooRealVar * fracLL = new RooRealVar("fracLL","fracLL",fracLLv[0]);
		RooRealVar * fracDD = new RooRealVar("fracDD","fracDD",fracDDv[0]);

		/*
		string bkgmodel = "Poly0-v0-l2";
		RooAbsPdf * bkgLL_teo = stringToPdf(bkgmodel.c_str(),"bkgLL_teo", cosThetaL);
		RooAbsPdf * bkgLLB_teo = stringToPdf(bkgmodel.c_str(),"bkgLLB_teo", cosThetaB);
		RooAbsPdf * bkgDD_teo = stringToPdf(bkgmodel.c_str(),"bkgDD_teo", cosThetaL); 
		RooAbsPdf * bkgDDB_teo = stringToPdf(bkgmodel.c_str(),"bkgDDB_teo", cosThetaB);
		RooAbsPdf * bkgLL = new RooProdPdf("bkgLL","",*bkgLL_teo,*effLLpdf);
		RooAbsPdf * bkgDD = new RooProdPdf("bkgDD","",*bkgDD_teo,*effDDpdf);
		RooAbsPdf * bkgLLB = new RooProdPdf("bkgLLB","",*bkgLLB_teo,*effLLBpdf);
		RooAbsPdf * bkgDDB = new RooProdPdf("bkgDDB","",*bkgDDB_teo,*effDDBpdf);
		*/

		cout << "Backgrounds extracted" << endl;

		RooAbsPdf * modelLL = new RooAddPdf("modelLL","modelLL",RooArgSet(*corrPdfLL,*bkgLL),*fracLL);
		RooAbsPdf * modelDD = new RooAddPdf("modelDD","modelDD",RooArgSet(*corrPdfDD,*bkgDD),*fracDD);
		RooAbsPdf * modelLLB = new RooAddPdf("modelLLB","modelLLB",RooArgSet(*corrPdfLLB,*bkgLLB),*fracLL);
		RooAbsPdf * modelDDB = new RooAddPdf("modelDDB","modelDDB",RooArgSet(*corrPdfDDB,*bkgDDB),*fracDD);

		// CREATE COMBINED DATASET
		RooDataSet * combData = new RooDataSet(Form("combData_%i",i),"combined data",RooArgSet(*MM,*cosThetaL,*cosThetaB),Index(*samples),Import("DD",*dataDD),Import("LL",*dataLL));

		Str2VarMap params;
		params["fL"] = fL;
		params["afb"] = afb;	
		Str2VarMap paramsB;
		paramsB["afbB"] = afbB;

		// FIT COS LEPTON
		RooSimultaneous * combModel = new RooSimultaneous(Form("combModel_%i",i),"",*samples);
		combModel->addPdf(*modelLL,"LL");
		combModel->addPdf(*modelDD,"DD");

		safeFit(combModel,combData,params,&isInAllowedArea,"-scan",getNFreePars(combModel,RooArgSet(*cosThetaL)));	
		
		// FIT COS HADRON
		RooSimultaneous * combModelB = new RooSimultaneous(Form("combModelB_%i",i),"",*samples);
		combModelB->addPdf(*modelLLB,"LL");
		combModelB->addPdf(*modelDDB,"DD");

		safeFit(combModelB,combData,paramsB,&isInAllowedAreaB,"-scan",getNFreePars(combModelB,RooArgSet(*cosThetaB)));

		cout << endl << fixed << setprecision(6) << "AfbB = " << afbB->getVal() << " +/- " << afbB->getError() << endl;
		cout << "Afb = " << afb->getVal() << " +/- " << afb->getError() << endl;
		cout << "fL = " << fL->getVal() << " +/- " << fL->getError() << endl;
		cout << endl;
		
		TH1F * fLsys = new TH1F(Form("fLsys_%i",i),"fLsys",40,-1,1);
		TH1F * afbsys = new TH1F(Form("afbsys_%i",i),"afbsys",40,-1,1);
		TH1F * afbBsys = new TH1F(Form("afbBsys_%i",i),"afbBsys",40,-1,1);
		TH1F * fLsys_frac = new TH1F(Form("fLsys_frac%i",i),"fLsys",40,-1,1);
		TH1F * afbsys_frac = new TH1F(Form("afbsys_frac%i",i),"afbsys",40,-1,1);
		TH1F * afbBsys_frac = new TH1F(Form("afbBsys_frac%i",i),"afbBsys",40,-1,1);
		TH1F * fLsys_eff = new TH1F(Form("fLsys_eff%i",i),"fLsys",40,-1,1);
		TH1F * afbsys_eff = new TH1F(Form("afbsys_eff%i",i),"afbsys",40,-1,1);
		TH1F * afbBsys_eff = new TH1F(Form("afbBsys_eff%i",i),"afbBsys",40,-1,1);


		RooAbsPdf * corrPdfDDs = new RooProdPdf("sigPdfDDs"+q2name,"corrPdfDD",*teoPdf,*effDDs);
		RooAbsPdf * corrPdfDDBs = new RooProdPdf("sigPdfDDBs"+q2name,"corrPdfDDB",*teoPdfB,*effDDBs);
		//RooAbsPdf * bkgDDs = new RooProdPdf("bkgDD","",*bkgDD_teo,*effDDs);
		//RooAbsPdf * bkgDDBs = new RooProdPdf("bkgDDB","",*bkgDDB_teo,*effDDBs);


		double origAfb = 0;
		double origAfbh = -0.37;
		double origfL = 0.7;

		TRandom3 r(0);

		for(int e = 0; e < nexp; e++)
		{
			showPercentage(e,nexp);

			afb->setVal(origAfb);
			afbB->setVal(origAfbh);
			fL->setVal(origfL);
			fracDD->setVal(fracDDv[0]);

			histFile->cd();
			RooAbsPdf * toypdf = (RooAbsPdf *)modelDD->Clone();
			Analysis * toy = new Analysis("toy",cosThetaL,modelDD,nevts);
			RooAbsPdf * toypdfB = (RooAbsPdf *)modelDDB->Clone();
			Analysis * toyB = new Analysis("toyB",cosThetaB,modelDDB,nevts);

			RooDataSet * toyData = toy->GetDataSet("-recalc");
			RooDataSet * toyBData = toyB->GetDataSet("-recalc");
			safeFit(toypdf,toyData,params,&isInAllowedArea,"-scan",getNFreePars(combModel,RooArgSet(*cosThetaL)));
			safeFit(toypdfB,toyBData,paramsB,&isInAllowedAreaB,"-scan",getNFreePars(combModelB,RooArgSet(*cosThetaB)));
			double def_afb = afb->getVal();
			double def_fL = fL->getVal();
			double def_afbB = afbB->getVal();

			afb->setVal(origAfb);
			afbB->setVal(origAfbh);
			fL->setVal(origfL);
			fracDD->setVal(fracDDv[0]);

			if(sys.find("bkg")!=string::npos || sys=="all")
			{
				string bkgmodel_2 = "Poly0-v0-l2";
				RooAbsPdf * bkg_teo_2 = stringToPdf(bkgmodel_2.c_str(),"bkgDD_teo_2", cosThetaL); 
				RooAbsPdf * bkgB_teo_2 = stringToPdf(bkgmodel_2.c_str(),"bkgDDB_teo_2", cosThetaB);
				//RooAbsPdf * bkg_2 = new RooProdPdf("bkg_2","",*bkg_teo_2,*effDDpdf);
				//RooAbsPdf * bkgB_2 = new RooProdPdf("bkgB_2","",*bkgB_teo_2,*effDDBpdf);
				RooAbsPdf * model_2 = new RooAddPdf("model_2","model",RooArgSet(*corrPdfDD,*bkg_teo_2),*fracDD);
				RooAbsPdf * modelB_2 = new RooAddPdf("modelB_2","modelB",RooArgSet(*corrPdfDDB,*bkgB_teo_2),*fracDD);
				safeFit(model_2,toyData,params,&isInAllowedArea,"-scan",getNFreePars(model_2,RooArgSet(*cosThetaL)));
				safeFit(modelB_2,toyBData,paramsB,&isInAllowedAreaB,"-scan",getNFreePars(modelB_2,RooArgSet(*cosThetaB)));
				
				double oth_afb = afb->getVal();
				double oth_fL = fL->getVal();
				double oth_afbB = afbB->getVal();

				fLsys->Fill(oth_fL-def_fL);
				afbsys->Fill(oth_afb-def_afb);
				afbBsys->Fill(oth_afbB-def_afbB);

				afb->setVal(origAfb);
				afbB->setVal(origAfbh);
				fL->setVal(origfL);
				fracDD->setVal(fracDDv[0]);
			}
			if(sys.find("frac")!=string::npos || sys=="all")
			{
				double rdm_frac = r.Gaus(fracDDv[0],fracDDv[1]);
				//double rdm_frac = fracDDv[0] + fracDDv[1];
				RooRealVar * fracDD_2 = new RooRealVar("fracDD_2","fracDD_2",rdm_frac);	
				RooAbsPdf * model_3 = new RooAddPdf("model_3","model",RooArgSet(*corrPdfDD,*bkgDD),*fracDD_2);
				RooAbsPdf * modelB_3 = new RooAddPdf("modelB_3","modelB",RooArgSet(*corrPdfDDB,*bkgDDB),*fracDD_2);
				
				safeFit(model_3,toyData,params,&isInAllowedArea,"-scan",getNFreePars(model_3,RooArgSet(*cosThetaL)));
				safeFit(modelB_3,toyBData,paramsB,&isInAllowedAreaB,"-scan",getNFreePars(modelB_3,RooArgSet(*cosThetaB)));

				double frc_afb = afb->getVal();
				double frc_fL = fL->getVal();
				double frc_afbB = afbB->getVal();

				fLsys_frac->Fill(frc_fL-def_fL);
				afbsys_frac->Fill(frc_afb-def_afb);
				afbBsys_frac->Fill(frc_afbB-def_afbB);
				
				afb->setVal(origAfb);
				afbB->setVal(origAfbh);
				fL->setVal(origfL);
				fracDD->setVal(fracDDv[0]);
			}
			if(sys.find("eff")!=string::npos || sys=="all")
			{
				RooAbsPdf * model_4 = new RooAddPdf("modelDD_4","modelDD",RooArgSet(*corrPdfDDs,*bkgDD),*fracDD);
				RooAbsPdf * modelB_4 = new RooAddPdf("modelDDB_4","modelDDB",RooArgSet(*corrPdfDDBs,*bkgDDB),*fracDD);
				
				safeFit(model_4,toyData,params,&isInAllowedArea,"-scan",getNFreePars(model_4,RooArgSet(*cosThetaL)));
				safeFit(modelB_4,toyBData,paramsB,&isInAllowedAreaB,"-scan",getNFreePars(modelB_4,RooArgSet(*cosThetaB)));

				double eff_afb = afb->getVal();
				double eff_fL = fL->getVal();
				double eff_afbB = afbB->getVal();

				fLsys_eff->Fill(eff_fL-def_fL);
				afbsys_eff->Fill(eff_afb-def_afb);
				afbBsys_eff->Fill(eff_afbB-def_afbB);
			}
		}

		afbsysh.push_back(afbsys);
		afbBsysh.push_back(afbBsys);
		fLsysh.push_back(fLsys);
		afbsysh_frac.push_back(afbsys_frac);
		afbBsysh_frac.push_back(afbBsys_frac);
		fLsysh_frac.push_back(fLsys_frac);
		afbsysh_eff.push_back(afbsys_eff);
		afbBsysh_eff.push_back(afbBsys_eff);
		fLsysh_eff.push_back(fLsys_eff);
	}


	cout << "######################    Bkg shape sys ###########################################" << endl;
	for(size_t q = 0; q < afbsysh.size(); q++)
	{
		cout << fixed << setprecision(2) << "-------- Bin " << q2min[start+q] << "-" << q2max[start+q] << endl;
		cout << fixed << setprecision(5) << "fL sys = " << fLsysh[q]->GetMean() << " +/- " << fLsysh[q]->GetMeanError() << endl;
		cout << "Afb sys = " << afbsysh[q]->GetMean() << " +/- " << afbsysh[q]->GetMeanError() << endl;
		cout << "AfbB sys = " << afbBsysh[q]->GetMean() << " +/- " << afbBsysh[q]->GetMeanError() << endl;
	}

	cout << "#######################   Bkg fraction sys ##########################################" << endl;
	for(size_t q = 0; q < afbsysh.size(); q++)
	{
		cout << fixed << setprecision(2) << "-------- Bin " << q2min[start+q] << "-" << q2max[start+q] << endl;
		cout << fixed << setprecision(5) << "fL sys = " << fLsysh_frac[q]->GetMean() << " +/- " << fLsysh_frac[q]->GetMeanError() << endl;
		cout << "Afb sys = " << afbsysh_frac[q]->GetMean() << " +/- " << afbsysh_frac[q]->GetMeanError() << endl;
		cout << "AfbB sys = " << afbBsysh_frac[q]->GetMean() << " +/- " << afbBsysh_frac[q]->GetMeanError() << endl;
	}
	cout << "########################## Eff shape sys  #######################################" << endl;
	for(size_t q = 0; q < afbsysh.size(); q++)
	{
		cout << fixed << setprecision(2) << "-------- Bin " << q2min[start+q] << "-" << q2max[start+q] << endl;
		cout << fixed << setprecision(5) << "fL sys = " << fLsysh_eff[q]->GetMean() << " +/- " << fLsysh_eff[q]->GetMeanError() << endl;
		cout << "Afb sys = " << afbsysh_eff[q]->GetMean() << " +/- " << afbsysh_eff[q]->GetMeanError() << endl;
		cout << "AfbB sys = " << afbBsysh_eff[q]->GetMean() << " +/- " << afbBsysh_eff[q]->GetMeanError() << endl;
	}


	cout << "Total ################## Total sys ###############################################" << endl;
	for(size_t q = 0; q < afbsysh.size(); q++)
	{
		cout << fixed << setprecision(2) << "-------- Bin " << q2min[start+q] << "-" << q2max[start+q] << endl;
		cout << fixed << setprecision(5) << "fL sys = " << TMath::Sqrt(TMath::Power(fLsysh_frac[q]->GetMean(),2) + TMath::Power(fLsysh[q]->GetMean(),2) + TMath::Power(fLsysh_eff[q]->GetMean(),2))  << endl;
		cout << "Afb sys = " << TMath::Sqrt(TMath::Power(afbsysh_frac[q]->GetMean(),2) + TMath::Power(afbsysh[q]->GetMean(),2) + TMath::Power(afbsysh_eff[q]->GetMean(),2)) << endl;
		cout << "AfbB sys = " << TMath::Sqrt(TMath::Power(afbBsysh_frac[q]->GetMean(),2) + TMath::Power(afbBsysh[q]->GetMean(),2) + TMath::Power(afbBsysh_eff[q]->GetMean(),2)) << endl;
	}
}
